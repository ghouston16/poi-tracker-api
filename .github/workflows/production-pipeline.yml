name: Build, Test, Deploy - Production

on: 
  push:
    branches:
      - release/*
     # - develop
     #- feature/*

env:
  IMAGE: docker.pkg.github.com/ghouston16/poi-tracker-api/python-poi-api
  REGISTRY: ghcr.io

jobs:

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    environment:
      name: build
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GH_ACTOR }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE }}:latest
          labels: ${{ steps.meta.outputs.labels }}
  # https://testdriven.io/courses/tdd-fastapi/continuous-integration/ 
  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: build
    env:
      DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
      DATABASE_PORT: ${{secrets.DATABASE_PORT}}
      DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
      DATABASE_NAME: ${{secrets.DATABASE_NAME}}
      DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
      DATABASE_URL: ${{secrets.DATABASE_URL}}
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GH_ACTOR }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Build image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE }}:latest
          docker build . -f Dockerfile --tag  ${{ env.REGISTRY }}/${{ env.IMAGE }}:latest
      - name: Run Pytest with Compose
        run: |
          echo --- Running test cases ---
          docker-compose -f docker-compose.yml up --build --exit-code-from api
          echo --- Completed test cases --- 
      - name: Run Container
        run: docker run -d --name python-poi-api ${{ env.REGISTRY }}/${{ env.IMAGE }}:latest #-e DATABASE_URL=sqlite://sqlite.db -p 5003:8765 #-e ENVIRONMENT=dev DATABASE_URL=${{secrets.DATABASE_URL}} DATABASE_HOSTNAME=${{secrets.DATABASE_HOSTNAME}} DATABASE_PORT=${{secrets.DATABASE_PORT}} DATABASE_PASSWORD=${{secrets.DATABASE_PASSWORD}} -e DATABASE_NAME= ${{secrets.DATABASE_NAME}} DATABASE_USERNAME= ${{secrets.DATABASE_USERNAME}} SECRET_KEY=${{secrets.SECRET_KEY}} ALGORITHM=${{secrets.ALGORITHM}} ACCESS_TOKEN_EXPIRE_MINUTES=${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}} -p 5432:5432
     # - name: Testing DB Migrations
     #   run: docker exec python-poi-api alembic upgrade head
     # - name: Pytest
     #   run: docker exec python-poi-api pytest .
     # - name: Flake8
     #   run: docker exec python-poi-api flake8 . --ignore E711,E302,F541,E712,W291
     # - name: Black
     #   run: docker exec python-poi-api black . --check
     # - name: isort
     #   run: docker exec python-poi-api isort . --check-only 

  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: [build, test]
    environment: production
    env:
      HEROKU_APP_NAME: ${{secrets.HEROKU_APP_NAME}}
      HEROKU_REGISTRY_IMAGE: registry.heroku.com/${HEROKU_APP_NAME}/web
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GH_ACTOR }}
          password: ${{ secrets.GH_TOKEN }}
      - name: Build image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE }}:latest
          docker build . -f Dockerfile --tag  ${{ env.REGISTRY }}/${{ env.IMAGE }}:latest
      - name: Log in to the Heroku Container Registry
        run: docker login -u _ -p ${HEROKU_API_KEY} registry.heroku.com
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      - name: Tag image 
        run: docker tag ${{ env.REGISTRY }}/${{ env.IMAGE }}:latest registry.heroku.com/${{HEROKU_APP_NAME}}/web
      - name: Push to the registry
        run: docker push ${{ env.HEROKU_REGISTRY_IMAGE }}
      #- name: Set environment variables
      #  run: |
      #    echo "HEROKU_REGISTRY_IMAGE=${{ env.HEROKU_REGISTRY_IMAGE }}" >> $GITHUB_ENV
      #    echo "HEROKU_AUTH_TOKEN=${{ secrets.HEROKU_AUTH_TOKEN }}" >> $GITHUB_ENV
      - name: Release
        run: |
          chmod +x ./release.sh
          ./release.sh
