name: Continuous Integration and Delivery

on:
  push:
    branches:
      - feature/production-pipeline.yml

env:
  IMAGE: docker.pkg.github.com/ghouston16/poi-tracker-api/python-poi-api
  REGISTRY: ghcr.io

jobs:
 
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GH_ACTOR }}
          password: ${{ secrets.GH_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE }}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE }}:latest
          labels: ${{ steps.meta.outputs.labels }}
  # https://testdriven.io/courses/tdd-fastapi/continuous-integration/ 
  test:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: production
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GH_ACTOR }}
          password: ${{ secrets.GH_TOKEN }}}
      - name: Build image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.IMAGE }}:latest \
            --file ./Dockerfile \
      - name: Run container
        run: |
          docker run \
            -d \
            --name python-poi-api \
            -e PORT=8765 \
            -e ENVIRONMENT=dev \
            -e DATABASE_URL=sqlite://sqlite.db \
            -e DATABASE_TEST_URL=sqlite://sqlite.db \
            -p 5003:8765 \
            ${{ env.IMAGE }}:latest
      - name: Pytest
        run: docker exec python-poi-api python -m pytest .
      - name: Flake8
        run: docker exec python-poi-api -m flake8 .
      - name: Black
        run: docker exec python-poi-api -m black . --check
      - name: isort
        run: docker exec python-poi-api -m isort . --check-only

  deploy:
    name: Deploy to Heroku
    runs-on: ubuntu-latest
    needs: [build, test]
    env:
      HEROKU_APP_NAME: ${{ secrets.HEROKU_APP_NAME }}
      HEROKU_REGISTRY_IMAGE: registry.heroku.com/python-poi-api
    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          ref: master
      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.GH_ACTOR }}
          password: ${{ secrets.GH_TOKEN }}}
      - name: Pull image
        run: |
          docker pull ${{ env.IMAGE }}:latest || true
      - name: Build image
        run: |
          docker build \
            --cache-from ${{ env.IMAGE }}:latest \
            --tag ${{ env.HEROKU_REGISTRY_IMAGE }}:latest \
            --file ./Dockerfile \
      - name: Log in to the Heroku Container Registry
        run: docker login -u _ -p ${secrets.HEROKU_API_KEY} registry.heroku.com
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      - name: Push to the registry
        run: docker push ${{ env.HEROKU_REGISTRY_IMAGE }}
      - name: Set environment variables
        run: |
          echo "HEROKU_REGISTRY_IMAGE=${{ env.HEROKU_REGISTRY_IMAGE }}" >> $GITHUB_ENV
          echo "HEROKU_API_KEY=${{ secrets.HEROKU_API_KEY }}" >> $GITHUB_ENV
      - name: Release
        run: |
          chmod +x ./release.sh
          ./release.sh